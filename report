Question 1. (5 marks)
State the dimensions of complexity in DragonGame, and explain your selection.

Dimension of Complexity:
Modularity: Flat
Planning horizon: Static
Representation: Explicit states
Computational limits: Bounded rationality
Learning: Knowledge is given
Sensing uncertainty: Fully observable
Effect uncertainty: Deterministic
Preference: Goals
Number of agents: Single agent
Interaction: Offline


Question 2. (5 marks)
Describe the components of your agent design for DragonGame.

Action Space (A): The set of all possible actions the agent can perform.
    - This is defined by game_env and includes all the directions and movements the character can perform. 

Percept Space (P): The set of all possible things the agent can perceive.
    - This is also defined in game_env and is dependant on the level. 
    - Given this is a fully obseravble the percept space and the state space are the same. 
    - They both include all available tiles in the level. 

State Space (S): The set of all possible configurations of the world the agent is operating
in.
    - Is the same as the percept space. 

World Dynamics/Transition Function (T : S × A → S):
    - A function that specifies how the configuration of the world changes when the agent performs actions in it.
    - This is implemented by perform_action() in game_env. It defines the outcome of a given move the agent performs. 


Perception Function (Z : S → P):
    - A function that maps a state to a perception.
    - This is defined in game_state by get_sucessors(). It runs game_env.perform_action() for all actions possible.
        It then returns all the states reachable. 

Utility Function (U : S → R):
    - A function that maps a state (or a sequence of states) to a real number, indicating how desirable it is for the agent to occupy that state/sequence of states.
    - This is defined in game_state.get_heuristic(). 
    - It returns the distance to a gem if gems are availbe on the map. Or it returns distance to the exit 
    - The returned distance is then added to the cost of the nodes path. 

Question 3. (15 marks)
Compare the performance of Uniform Cost Search and A* search in terms of the following statistics:
a) The number of nodes generated
b) The number of nodes on the fringe when the search terminates
c) The number of nodes on the explored list (if there is one) when the search terminates
d) The run time of the algorithm (e.g. in units such as mins:secs). Note that you can report run-times
from your own machine, not the Gradescope servers.
e) Discuss and interpret these results. If you are unable to implement A* search, please report and discuss
the statistics above for UCS only.


Question 4. (15 marks)
Some challenging aspects of designing a DragonGame agent are the asymmetric movement dynamics
(moving up behaves differently to moving down), the problem of choosing the order in which to visit and
collect each gem, and the large number of available actions.
Design and describe heuristics (or components of a combined heuristic function) that you have developed in
the search task that account for these aspects (or any other challenging aspects you have identified) of the
problem. Your documentation should provide a thorough explanation of the rationale for using your chosen
heuristics (maximum of 5 marks per heuristic).

    - First part of the heuristc function is the path cost which is the total cost of all the actions to get to that node. Nodes with low costs will be searched first.
        To ensure the cost to get to the node is the lowest available if when searching a lower cost solution is found the nodes action directory is replaced by the new lower cost solution. 
    
    - Secondly, the distance to the nearest gem is added to the path cost. Thus states near gems have lower costs than states further away. Given lower cost states are searched first. States closer to gems are searched first. 

